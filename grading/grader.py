# grader.py
from sentence_transformers import SentenceTransformer, util
from grading.answer_data import reference_answers
from grading.question_data import questions  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°

model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")

def grade(chapter: int, question: int, student_answer: str) -> dict:
    student_answer = student_answer.strip()
    reference_answer = reference_answers.get(chapter, {}).get(question)

    question_key = f"{chapter}_{question}"
    question_text = questions.get(chapter, {}).get(question_key, "‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

    if reference_answer is None:
        return {
            "score": 0,
            "similarity": 0.0,
            "feedback": f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà {chapter} ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {question}",
            "question": question_text
        }

    embedding1 = model.encode(student_answer, convert_to_tensor=True)
    embedding2 = model.encode(reference_answer, convert_to_tensor=True)
    similarity = util.pytorch_cos_sim(embedding1, embedding2).item()
    score = round(similarity * 100, 2)

    if score > 70:
        feedback = "‚úÖ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
    elif score > 50:
        feedback = "üìù ‡∏û‡∏≠‡πÉ‡∏ä‡πâ ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"
    else:
        feedback = "‚ùå ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"

    return {
        "score": score,
        "similarity": score,
        "feedback": feedback,
        "question": question_text  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    }
